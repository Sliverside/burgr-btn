@import "functions";

$BPS: () !global;
$this: () !global;

// | breakpoints ============================================================ \\

$max-phone: 600px !default;
$max-tablet-portrait: 900px !default;
$max-desktop: 1200px !default;
$max-big-desktop: 1800px !default;

@if not ($max-phone <= $max-tablet-portrait) or not ($max-tablet-portrait <= $max-desktop) or not ($max-desktop <= $max-big-desktop) {
  @error 'make your breakpoints respect this : $max-phone < $max-tablet-portrait < $max-desktop < $max-big-desktop';
}

$bpNames: (
  'max-phone': $max-phone,
  'max-tablet-portrait': $max-tablet-portrait,
  'max-desktop': $max-desktop,
  'max-big-desktop': $max-big-desktop,
);

/// this mixins create simple media queries and is designed for use it in a loop
/// @arg {number | String} $maxORbpName - the max-width value of your media queries or a breakpoint name and optionaly a suffixe cf: doc/breakpoints
/// @arg {number} $min - the min-width value of your media queries
/// @output - A media queries with the desired breakpoints
/// @content - Content of the media queries
@mixin BPS($maxORbpName, $min: false) {
  $max: false;

  @if type-of($maxORbpName) == string {
    $bpName: '';
    $suffix: '';
    @if str-index($maxORbpName, "@") {
      $bpName: 'max-' + str-slice($maxORbpName, 1, str-index($maxORbpName, "@") - 1);
      $suffix: str-slice($maxORbpName, str-index($maxORbpName, "@") + 1);
    }@else {
      $bpName: 'max-' + $maxORbpName;
      $suffix: false;
    }
    $bp-index: index(map-keys($bpNames), $bpName);
    $bp-indexMinus1: $bp-index - 1;
    $bp-indexPlus1: $bp-index + 1;
    @if $bp-indexMinus1 < 1 {
      $bp-indexMinus1: false;
    }
    @if $bp-indexPlus1 > length($bpNames) {
      $bp-indexPlus1: false;
    }
    @if $suffix {
      @if $suffix == 'up' and $bp-indexMinus1 {
        $min: nth(map-values($bpNames), $bp-indexMinus1);
      }@else {
        $min: false;
      }
      @if $suffix == 'down' and $bp-indexPlus1 {
        $max: nth(map-values($bpNames), $bp-indexPlus1);
      }@else {
        $max: false;
      }
    }@else {
      $max: G($bpNames, $bpName);
      $min: if($bp-indexMinus1 and $bp-indexMinus1 <= length($bpNames), nth(map-values($bpNames), $bp-indexMinus1), false);
    }
  }

  @if type-of($maxORbpName) == number {
    $max: $maxORbpName;
  }

  $max: if($max, $max - 0.05px, $max);
  @if $max != false and $min != false {
    @media (max-width: $max) and (min-width: $min) {@content;}
  }@else if $max != false {
    @media (max-width: $max) {@content;}
  }@else if $min != false {
    @media (min-width: $min) {@content;}
  }@else { @content; }
}

// | this =================================================================== \\
/// function to map deep get a value with $this as the map
/// @arg {String | Arglist} $keys - keychain targeting the value
@function this($keys...) {
  @return G($this, $keys...);
}

// | get breakpoint value =================================================== \\

/// function to get the value of a var into a breakpoint map
/// @arg {String} $key - the key of the value targeted
/// @arg {Boolean} $default [true] - true, return the defau
@function Gbp($key, $default: true) {
  @if type-of($key) == list {
    $result: false;
    @each $name in $key {
      @if $result == false {
        @if G($this, 'values', $name) != null or (G($this, 'default', $name) != null and $default == true) {
          $result: true;
        }@else {
          $result: false;
        }
      }
    }
    @return $result;
  }@else {
    @return if(G($this, 'values', $key) != null, G($this, 'values', $key), if(G($this, 'default', $key) != null and $default == true, G($this, 'default', $key), null));
  }
}

// | set breakpoint value =================================================== \\

@function Sbp($key, $value) {
  $result: ();
  $breakpoint: ();
  $default: ();
  @if this('breakpoint', 'values') == map {
    $breakpoint: map-merge(this('breakpoint'), ('values': map-merge(this('breakpoint', 'values'), ($key: $value))));
  }@else {
    $breakpoint: map-merge(this('breakpoint'), ('values': ($key: $value)));
  }

  @if this('default') {
    $default: map-merge(this('default'), ($key: $value));
  }

  $result: S($this, 'breakpoint', $breakpoint);
  $result: S($this, 'default', $default);

  @return $result;
}

// | add breakpoints vars (loop) ============================================ \\

@function add-bp-vars-loop($breakpoints, $new, $key) {
  $new: map-merge(('max':  false, 'min': false), $new);
  $this: $new !global;
  $default: if(this('max') == false and this('min') == false, ($key: this('value')), null);
  $value: G($new, 'value');
  $new-breakpoint: R($new, 'value');
  $finded: false;
  $values: ();
  $temp: ();
  @each $breakpoint in $breakpoints {
    $this: $breakpoint !global;
    @if this('default') and $default {
      $default: map-merge(this('default'), $default);
    }@else if this('default') {
      $default: this('default');
    }
  }
  @each $breakpoint in $breakpoints {
    $this: $breakpoint !global;
    $breakpoint: map-merge($breakpoint, ('default': $default));
    @if this('breakpoint') == $new-breakpoint {
      $finded: true;
      $breakpoint: map-merge( $breakpoint, ('values': (S(this('values'), $key, $value))) );
    }
    $temp: append($temp, $breakpoint);
  }
  $breakpoints: $temp;
  @if $finded == false {
    $breakpoints: append($breakpoints, ('breakpoint': $new-breakpoint, 'values': ($key: $value), 'default': $default));
  }
  @return $breakpoints;
}

// | add breakpoints vars =================================================== \\

@function add-bp-vars($map, $name: false, $object: true, $object-child: false) {
  $breakpoints: ();
  @if $object {
    @each $instance-name, $instance in $map {
      $breakpoints: S($breakpoints, $instance-name, add-bp-vars($instance, $instance-name, false, true));
    }
  }@else {
    @each $key, $properties in $map {
      @if type-of($properties) == map { // if there is only one breakpoint
        $breakpoints: add-bp-vars-loop($breakpoints, $properties, $key);
      }@else if type-of($properties) == list { // if there is various breakpoints
        @each $breakpoint in $properties {
          $breakpoint: if(type-of($breakpoint) == map, $breakpoint, ('value': $breakpoint));
          $breakpoints: add-bp-vars-loop($breakpoints,  $breakpoint, $key);
        }
      }@else { // if there is no breakpoint
        $breakpoints: add-bp-vars-loop($breakpoints, ('value': $properties,), $key);
      }
    }
  }
  @return $breakpoints;
}
