@import "functions";

$BPS: () !global;
$this: () !global;

// | breakpoints ============================================================ \\

/// this mixins create simple media queries and is designed for use it in a loop
/// @arg {numbers} $max - the max-width value of your media queries
/// @arg {numbers} $min - the min-width value of your media queries
@mixin BPS($max, $min: false) {
  $max: if($max, $max - 0.05px, $max);
  @if $max != false and $min != false {
    @media (max-width: $max) and (min-width: $min) {@content;}
  }@else if $max != false {
    @media (max-width: $max) {@content;}
  }@else if $min != false {
    @media (min-width: $min) {@content;}
  }@else { @content; }
}

// | this =================================================================== \\

@function this($keys...) {
  @return G($this, $keys...);
}

// | get breakpoint value =================================================== \\

@function Gbp($var-name, $global: true) {
  @if type-of($var-name) == list {
    $result: false;
    @each $name in $var-name {
      @if $result == false {
        @if G($this, 'values', $name) != null or (G($this, 'global', $name) != null and $global == true) {
          $result: true;
        }@else {
          $result: false;
        }
      }
    }
    @return $result;
  }@else {
    @return if(G($this, 'values', $var-name) != null, G($this, 'values', $var-name), if(G($this, 'global', $var-name) != null and $global == true, G($this, 'global', $var-name), null));
  }
}

// | set breakpoint value =================================================== \\

@function Sbp($var-name, $value) {
  $result: ();
  $breakpoint: ();
  $global: ();
  @if this('breakpoint', 'values') == map {
    $breakpoint: map-merge(this('breakpoint'), ('values': map-merge(this('breakpoint', 'values'), ($var-name: $value))));
  }@else {
    $breakpoint: map-merge(this('breakpoint'), ('values': ($var-name: $value)));
  }

  @if this('global') {
    $global: map-merge(this('global'), ($var-name: $value));
  }

  $result: S($this, 'breakpoint', $breakpoint);
  $result: S($this, 'global', $global);

  @return $result;
}

// | add breakpoints vars (loop) ============================================ \\

@function add-bp-vars-loop($breakpoints, $new, $var-name) {
  $new: map-merge(('max':  false, 'min': false), $new);
  $this: $new !global;
  $global: if(this('max') == false and this('min') == false, ($var-name: this('value')), null);
  $value: G($new, 'value');
  $new-breakpoint: D($new, 'value');
  $finded: false;
  $values: ();
  $temp: ();
  @each $breakpoint in $breakpoints {
    $this: $breakpoint !global;
    @if this('global') and $global {
      $global: map-merge(this('global'), $global);
    }@else if this('global') {
      $global: this('global');
    }
  }
  @each $breakpoint in $breakpoints {
    $this: $breakpoint !global;
    $breakpoint: map-merge($breakpoint, ('global': $global));
    @if this('breakpoint') == $new-breakpoint {
      $finded: true;
      $breakpoint: map-merge($breakpoint, ('values': (S(this('values'), $var-name, $value))));
    }
    $temp: append($temp, $breakpoint);
  }
  $breakpoints: $temp;
  @if $finded == false {
    $breakpoints: append($breakpoints, ('breakpoint': $new-breakpoint, 'values': ($var-name: $value), 'global': $global));
  }
  @return $breakpoints;
}

// | add breakpoints vars =================================================== \\

@function add-bp-vars($map, $name, $object: true, $object-child: false) {
  $breakpoints: ();
  @if $object {
    @each $instance-name, $instance in $map {
      $breakpoints: S($breakpoints, $instance-name, add-bp-vars($instance, $instance-name, false, true));
    }
  }@else {
    @each $var-name, $properties in $map {
      @if type-of($properties) == map { // if there is only one breakpoint
        $breakpoints: add-bp-vars-loop($breakpoints, $properties, $var-name);
      }@else if type-of($properties) == list { // if there is various breakpoints
        @each $breakpoint in $properties {
          $breakpoint: if(type-of($breakpoint) == map, $breakpoint, ('value': $breakpoint));
          $breakpoints: add-bp-vars-loop($breakpoints,  $breakpoint, $var-name);
        }
      }@else { // if there is no breakpoint
        $breakpoints: add-bp-vars-loop($breakpoints, ('value': $properties,), $var-name);
      }
    }
  }
  @if $object-child {
    @return $breakpoints;
  }@else{
    @return S($BPS, $name, $breakpoints);
  }
}
