// | map deep get ============================================================\\

/// Map deep get
/// @author Hugo Giraudel
/// @access public
/// @param {Map} $map - Map
/// @param {Arglist} $keys - Key chain
/// @return {*} - Desired value
@function get($map, $keys...) {
  $cache: $map;
    @each $key in $keys {
      @if type-of($map) == map {
        $map: map-get($map, $key);
      }@else {
        @error $map ' : is not a map';
      }
    }
    @return $map;
}
@function G($map, $keys...) {
  @return get($map, $keys...);
}
// | map deep set =========================================================== \\

/// Deep set function to set a value in nested maps
/// @author Hugo Giraudel
/// @access public
/// @param {Map} $map - Map
/// @param {List} $keys -  Key chaine
/// @param {*} $value - Value to assign
/// @return {Map} map with the new key and her value
@function set($map, $keys, $value) {
  $maps: ($map,);
  $result: null;

  // If the last key is a map already
  // Warn the user we will be overriding it with $value
  @if type-of(nth($keys, -1)) == 'map' {
    @warn "The last key you specified is a map; it will be overrided with `#{$value}`.";
  }

  // If $keys is a single key
  // Just merge and return
  @if length($keys) == 1 {
    @return map-merge($map, ($keys: $value));
  }

  // Loop from the first to the second to last key from $keys
  // Store the associated map to this key in the $maps list
  // If the key doesn't exist, throw an error
  @for $i from 1 through length($keys) - 1 {
    $current-key: nth($keys, $i);
    $current-map: nth($maps, -1);
    $current-get: map-get($current-map, $current-key);
    @if $current-get == null {
      @error "Key `#{$current-key}` doesn't exist at current level in map.";
    }
    $maps: append($maps, $current-get);
  }

  // Loop from the last map to the first one
  // Merge it with the previous one
  @for $i from length($maps) through 1 {
    $current-map: nth($maps, $i);
    $current-key: nth($keys, $i);
    $current-val: if($i == length($maps), $value, $result);
    $result: map-merge($current-map, ($current-key: $current-val));
  }

  // Return result
  @return $result;
}

@function S($map, $keys, $value) {
  @return set($map, $keys, $value);
}

// | map deep delete ======================================================== \\

@function delete($map, $keys, $count: 1, $length: false) {
  @if $length == false {
    $length: length($keys);
  }
  $result: ();
  $new-keys: ();
  @if length($keys) == 1 {
    @if type-of($map) != map {
      // @error $map;
    }
    @return map-remove($map, nth($keys, 1));
  }@else {
    @if length($keys) > 1 {
      @for $i from 2 through length($keys) {
        $new-keys: join($new-keys, nth($keys, $i), comma);
      }
    }
    @each $k, $v in $map {
      @if $k != nth($keys, 1) {
        $result: map-merge($result, ($k:$v));
      }@else if length($keys) == 1 and $k == nth($keys, 1) and $length == $count{
        $result: map-merge($result, map-remove($v));
      }@else {
        $result: map-merge($result, ($k: delete($v, $new-keys, $count: $count + 1, $length: $length)));
      }
    }
  }
  @return $result;
}

@function D($map, $keys, $count: 1, $length: false) {
  @return delete($map, $keys, $count, $length);
}

// | list delete ============================================================ \\

@function remove($list, $value, $recursive: false) {
  $result: ();

  @for $i from 1 through length($list) {
    @if type-of(nth($list, $i)) == list and $recursive {
      $result: append($result, remove(nth($list, $i), $value, $recursive));
    } @else if nth($list, $i) != $value {
      $result: append($result, nth($list, $i));
    }
  }

  @return $result;
}
