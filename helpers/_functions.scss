// | map deep get ============================================================\\

/// Deep get function to get a value in nested maps
/// @author Hugo Giraudel
/// @arg {Map} $map - Map
/// @arg {Arglist} $keys - keychain targeting the value
/// @return {*} - Desired value
@function map-deep-get($map, $keys...) {
  $cache: $map;
    @each $key in $keys {
      @if type-of($map) == map {
        $map: map-get($map, $key);
      }@else {
        @error type-of($map) ' : is not a map';
      }
    }
    @return $map;
}
/// @alias map-deep-get
@function G($map, $keys...) {
  @return map-deep-get($map, $keys...);
}
// | map deep set =========================================================== \\

/// Deep set function to set a value in nested maps
/// @author Hugo Giraudel
/// @arg {Map} $map - Map
/// @arg {List} $keys - keychain targeting the desired key you want to create
/// @arg {*} $value - Value to assign
/// @return {Map} map with the new key and her value
@function map-deep-set($map, $keys, $value) {
  $maps: ($map,);
  $result: null;

  // If the last key is a map already
  // Warn the user we will be overriding it with $value
  @if type-of(nth($keys, -1)) == 'map' {
    @warn "The last key you specified is a map; it will be overrided with `#{$value}`.";
  }

  // If $keys is a single key
  // Just merge and return
  @if length($keys) == 1 {
    @return map-merge($map, ($keys: $value));
  }

  // Loop from the first to the second to last key from $keys
  // Store the associated map to this key in the $maps list
  // If the key doesn't exist, throw an error
  @for $i from 1 through length($keys) - 1 {
    $current-key: nth($keys, $i);
    $current-map: nth($maps, -1);
    $current-get: map-get($current-map, $current-key);
    @if $current-get == null {
      @error "Key `#{$current-key}` doesn't exist at current level in map.";
    }
    $maps: append($maps, $current-get);
  }

  // Loop from the last map to the first one
  // Merge it with the previous one
  @for $i from length($maps) through 1 {
    $current-map: nth($maps, $i);
    $current-key: nth($keys, $i);
    $current-val: if($i == length($maps), $value, $result);
    $result: map-merge($current-map, ($current-key: $current-val));
  }

  // Return result
  @return $result;
}
/// @alias map-deep-set
@function S($map, $keys, $value) {
  @return map-deep-set($map, $keys, $value);
}

// | map deep remove ======================================================== \\

/// Deep remove function to remove a value in nested maps
/// @arg {Map} $map - map
/// @arg {String | List} $keys - keychain to the desired key you want to delete
/// @return {Map} - map with the key deleted
@function map-deep-remove($map, $keys) {
  $count: if(variable-exists(count), $count, 0);
  $length: if(variable-exists(length), $length, length($keys));
  @if type-of($map) != map {
    @error "`#{$map}` is not a map on map-delete,";
  }
  $result: ();
  $new-keys: ();
  @if length($keys) == 1 {
    @return map-remove($map, nth($keys, 1));
  }@else {
    @if length($keys) > 1 {
      @for $i from 2 through length($keys) {
        $new-keys: join($new-keys, nth($keys, $i), comma);
      }
    }
    @each $k, $v in $map {
      @if $k != nth($keys, 1) {
        $result: map-merge($result, ($k:$v));
      }@else if length($keys) == 1 and $k == nth($keys, 1) and $length == $count{
        $result: map-merge($result, map-remove($v));
      }@else {
        $count: $count + 1;
        $result: map-merge($result, ($k: map-deep-remove($v, $new-keys)));
        $count: $count - 1;
      }
    }
  }
  @return $result;
}

/// @alias map-deep-remove
@function R($map, $keys) {
  @return map-deep-remove($map, $keys);
}

// | map sort by value ====================================================== \\

/// map sort by value function to sorted a map regarding the numbers values
/// @arg {Map} $map the map you want to sort by value
/// @arg {Boolean} $desc use true if you want items to be sort from bigger to lower and false for lower to bigger
/// @return {Map} - the map sorted regarding the numbers values
@function map-sort($map, $desc: false) {
  $map-new: ();
  @for $i from 1 through length($map) {
    $i: $i + 1;
    $compare-k: nth(map-keys($map), 1);
    $compare-v: nth(map-values($map), 1);
    @each $k, $v in $map {
      @if $v < $compare-v {
        $compare-k: $k;
        $compare-v: $v;
      }
    }
    @if $desc == true {
      $map-new: map-merge(($compare-k: $compare-v), $map-new);
    }@else {
      $map-new: map-merge($map-new, ($compare-k: $compare-v));
    }
    $map: R($map, $compare-k);
  }
  @return $map-new;
}

// | list delete ============================================================ \\

/// List remove function for remove a value within a list
/// @arg {list} $list - list
/// @arg {*} $value - value to delete
/// @return {List} - list with the value deleted
@function list-remove($list, $value, $recursive: false) {
  $result: ();

  @for $i from 1 through length($list) {
    @if type-of(nth($list, $i)) == list and $recursive {
      $result: append($result, list-remove(nth($list, $i), $value, $recursive));
    } @else if nth($list, $i) != $value {
      $result: append($result, nth($list, $i));
    }
  }

  @return $result;
}
