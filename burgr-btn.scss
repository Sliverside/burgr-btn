@import "helpers/functions";
@import "helpers/breakpoints";
@import "helpers/math";

$prefix: 'burgr' !default;

$burgr-default: (
  'width': 40px, // (px)
  'stroke': 5px, // (px)
  'space-between': 4px, // (px)
  'state': 'normal', // normal, clasic, cross, arrow-left, arrow-right, arrow-top, arrow-bottom, vertical-points, horizontal-points
  'active-state': 'cross', // normal, clasic, cross, arrow-left, arrow-right, arrow-top, arrow-bottom, vertical-points, horizontal-points
  'hover-state': 'clasic', // normal, clasic, cross, arrow-left, arrow-right, arrow-top, arrow-bottom, vertical-points, horizontal-points
  // 'arrow-size-even': true, // true : arrows will always have same size, false: arrows will always take the maximum space they can
) !default;

$burgr: () !default;
$burgr: map-merge($burgr-default, $burgr);

$burgrs-default: (
  'clasic':(
    'parent': '#default#',
    'state': 'clasic',
  ),
  'cross':(
    'parent': '#default#',
    'state': 'cross',
  ),
  'left':(
    'parent': '#default#',
    'state': 'arrow-left',
  ),
  'right':(
    'parent': '#default#',
    'state': 'arrow-right',
  ),
  'top':(
    'parent': '#default#',
    'state': 'arrow-top',
  ),
  'bottom':(
    'parent':  '#default#',
    'state': 'arrow-bottom',
  ),
  'vertical-points':(
    'parent': '#default#',
    'state': 'vertical-points',
  ),
  'horizontal-points':(
    'parent': '#default#',
    'state': 'horizontal-points',
  ),
) !default;

$burgrs: () !default;
$burgrs: map-merge($burgrs-default, $burgrs);

$burgrs: map-merge(('#default#' : $burgr), $burgrs);

.burgr {
  position: relative;
  .burgr-part {
    transition: 200ms;
    position: absolute;
    background-color: #333;
  }
}

@mixin state($this, $state, $default: false) {
  $state: Gbp($state);
  $arrow-diag-h: Gbp('diagonale');
  @if Gbp('diagonale')/sqrt(2) > Gbp('height')/2 {
    $arrow-diag-h: Gbp('height')/2*sqrt(2);
  }

  $arrow-diag-v: Gbp('diagonale');
  @if Gbp('diagonale')/sqrt(2) > Gbp('width')/2 {
    $arrow-diag-v: Gbp('width')/2*sqrt(2);
  }
  @if Gbp('arrow-size-even') == null or Gbp('arrow-size-even') == true {
    @if $arrow-diag-h > $arrow-diag-v {
      $arrow-diag-h: $arrow-diag-v;
    }@else {
      $arrow-diag-v: $arrow-diag-h;
    }
  }

  @if $state == 'clasic' {
    .burgr-part {
      &:nth-child(1),
      &:nth-child(2),
      &:nth-child(3) {
        transform: scaleX(1) scaleY(1) translateX(-50%) translateY(0) rotate(0deg);
        width: Gbp('width');
        opacity: 1;
      }
    }
  }@else if $state == 'cross' {
    .burgr-part {
      &:nth-child(1) {
        transform: scaleX(1) scaleY(1) translateX(-50%) translateY(Gbp('stroke') + Gbp('space-between')) rotate(45deg);
        width: Gbp('diagonale');
      }
      &:nth-child(2) {
        transform: scaleX(1) scaleY(1) translateX(-50%) translateY(0) rotate(-45deg);
        width: Gbp('diagonale');
      }
      &:nth-child(3) {
        transform: scaleX(1) scaleY(1) translateX(-50%) translateY(Gbp('stroke')) rotate(0deg);
        opacity: 0;
        pointer-events: none;
      }
    }
  }@else if $state == 'vertical-points' {
    .burgr-part {
      &:nth-child(1),
      &:nth-child(2),
      &:nth-child(3) {
        transform: scaleX(1) scaleY(1) translateX(-50%) translateY(0) rotate(0deg);
        width: Gbp('stroke');
        opacity: 1;
      }
    }
  }@else if $state == 'horizontal-points' {
    .burgr-part {
      &:nth-child(1),
      &:nth-child(2),
      &:nth-child(3) {
        width: Gbp('stroke');
        opacity: 1;
      }
      &:nth-child(1) {
        transform: scaleX(1) scaleY(1) translateX(calc(-50% - #{Gbp('space-between') + Gbp('stroke')})) translateY(Gbp('space-between') + Gbp('stroke')) rotate(0deg);
      }
      &:nth-child(2) {
        transform: scaleX(1) scaleY(1) translateX(-50%) translateY(0) rotate(0deg);
      }
      &:nth-child(3) {
        transform: scaleX(1) scaleY(1) translateX(calc(-50% + #{Gbp('space-between') + Gbp('stroke')})) translateY(-(Gbp('space-between') + Gbp('stroke'))) rotate(0deg);
      }
    }
  }@else if $state == 'arrow-left' {
    .burgr-part {
      &:nth-child(1) {
        transform: scaleX(1) scaleY(1) translateX(-50%) translateY($arrow-diag-h/2/sqrt(2) + Gbp('stroke')/2/sqrt(2) - (Gbp('stroke')*0.5)) rotate(-45deg);
        width: $arrow-diag-h;
      }
      &:nth-child(2) {
        transform: scaleX(1) scaleY(1) translateX(-50%) translateY($arrow-diag-h/2/sqrt(2) - Gbp('stroke')/2/sqrt(2)) rotate(45deg);
        width: $arrow-diag-h;
      }
      &:nth-child(3) {
        transform: scaleX(1) scaleY(1) translateX(-50%) translateY(Gbp('stroke')) rotate(0);
        opacity: 0;
        pointer-events: none;
      }
    }
  }@else if $state == 'arrow-right' {
    .burgr-part {
      &:nth-child(1) {
        transform: scaleX(1) scaleY(1) translateX(-50%) translateY($arrow-diag-h/2/sqrt(2) + Gbp('stroke')/2/sqrt(2) - (Gbp('stroke')*0.5)) rotate(45deg);
        width: $arrow-diag-h;
      }
      &:nth-child(2) {
        transform: scaleX(1) scaleY(1) translateX(-50%) translateY($arrow-diag-h/2/sqrt(2) - Gbp('stroke')/2/sqrt(2)) rotate(-45deg);
        width: $arrow-diag-h;
      }
      &:nth-child(3) {
        transform: scaleX(1) scaleY(1) translateX(-50%) translateY(Gbp('stroke')) rotate(0);
        opacity: 0;
        pointer-events: none;
      }
    }
  }@else if $state == 'arrow-top' {
    .burgr-part {
      &:nth-child(1) {
        transform: scaleX(1) scaleY(1) translateX(calc(-50% + #{$arrow-diag-v/4*sqrt(2) - Gbp('stroke')/4*sqrt(2)})) translateY(Gbp('height')/2 - Gbp('stroke')/2) rotate(45deg);
        width: $arrow-diag-v;
      }
      &:nth-child(2) {
        transform: scaleX(1) scaleY(1) translateX(calc(-50% - #{$arrow-diag-v/4*sqrt(2) - Gbp('stroke')/4*sqrt(2)})) translateY(0) rotate(-45deg);
        width: $arrow-diag-v;
      }
      &:nth-child(3) {
        transform: scaleX(1) scaleY(1) translateX(-50%) translateY(Gbp('stroke')) rotate(0);
        opacity: 0;
        pointer-events: none;
      }
    }
  }@else if $state == 'arrow-bottom' {
    .burgr-part {
      &:nth-child(1) {
        transform: scaleX(1) scaleY(1) translateX(calc(-50% + #{$arrow-diag-v/4*sqrt(2) - Gbp('stroke')/4*sqrt(2)})) translateY(Gbp('height')/2 - Gbp('stroke')/2) rotate(-45deg);
        width: $arrow-diag-v;
      }
      &:nth-child(2) {
        transform: scaleX(1) scaleY(1) translateX(calc(-50% - #{$arrow-diag-v/4*sqrt(2) - Gbp('stroke')/4*sqrt(2)})) translateY(0) rotate(45deg);
        width: $arrow-diag-v;
      }
      &:nth-child(3) {
        transform: scaleX(1) scaleY(1) translateX(-50%) translateY(Gbp('stroke')) rotate(0);
        opacity: 0;
        pointer-events: none;
      }
    }
  }@else if $state == 'normal' or $default == true { // state: normal
    .burgr-part {
      &:nth-child(1),
      &:nth-child(2),
      &:nth-child(3) {
        opacity: 1;
      }
      &:nth-child(1) {
        transform: scaleX(1) scaleY(1) translateX(calc(-50% - #{Gbp('width')*0.1/2})) translateY(0) rotate(0deg);
        width: Gbp('width')*0.9;
      }
      &:nth-child(2) {
        transform: scaleX(1) scaleY(1) translateX(-50%) translateY(0) rotate(0deg);
        width: Gbp('width');
      }
      &:nth-child(3) {
        transform: scaleX(1) scaleY(1) translateX(calc(-50% - #{Gbp('width')*0.2/2})) translateY(0) rotate(0deg);
        width: Gbp('width')*0.8;
      }
    }
  }
}

@mixin burgr-gen($burgrs, $prefix) {
  $burgrs-cache: ();
  @each $name, $v in $burgrs {
    $this: $v !global;
    @if $v == () {@error $name;}
    @if this('parent') {
      $parent: G($burgrs, this('parent'));
      $parent: R($parent, 'state');
      $parent: R($parent, 'hover-state');
      $parent: R($parent, 'active-state');
      $burgrs-cache: S($burgrs-cache, $name, map-merge($parent, $this));
    }@else {
      $burgrs-cache: S($burgrs-cache, $name, $this);
    }
  }
  $burgrs: add-bp-vars($burgrs-cache);
  @each $name, $burgr in $burgrs {
    $this: $burgr !global;
    @if G(nth($this, 1), 'default', 'parent') {
      $parent-name: G(nth($this, 1), 'default', 'parent');
      @if $parent-name == "#default#" {
        $name: '.' + $prefix + '-' + $name;
      }@else {
        $name: '.' + $prefix + '-' + $parent-name + '-' + $name;
      }
    }@else if $name == "#default#"{
      $name: '.'+ $prefix;
    }@else {
      $name: '.'+ $prefix +'-' + $name;
    }
    #{$name} {
      @each $bp in $burgr {
        $this: $bp !global;
        $this: Sbp('height', Gbp('stroke')*3 + Gbp('space-between')*2) !global;
        $this: Sbp('diagonale', 0px) !global;
        @if Gbp('width') {
          @if Gbp(('stroke', 'space-between'), true) {
            @if Gbp('width') < Gbp('height') {
              $this: Sbp('diagonale', Gbp('width')*sqrt(2) - Gbp('stroke')) !global;
            }@else {
              $this: Sbp('diagonale', Gbp('height')*sqrt(2) - Gbp('stroke')) !global;
            }
          }
        }

        @include BPS(G($bp, 'breakpoint', 'max'), G($bp, 'breakpoint', 'min')) {
          @if Gbp('width', false) {width: Gbp('width');}
          @if Gbp(('stroke', 'space-between'), false) {height: Gbp('height');}
          @if Gbp('parent') == null {
            .burgr-part {
              opacity: 1;
              @if Gbp('width', false) {left: Gbp('width')/2;}
              @if Gbp('stroke', false) {height: Gbp('stroke');}
              @if Gbp('width', false) {width: Gbp('width');}
              &:nth-child(2) {
                @if Gbp(('space-between', 'stroke'), false) {top: Gbp('stroke') + Gbp('space-between');}
              }
              &:nth-child(3) {
                @if Gbp(('space-between', 'stroke'), false) {top: Gbp('stroke')*2 + Gbp('space-between')*2;}
              }
            }
          }

          @if Gbp('state') {
            @include state($this, 'state', if(Gbp('parent') == null, true, false));
          }

          @if Gbp('hover-state') {
            &:hover {
              @include state($this, 'hover-state');
            }
          }
          @if Gbp('active-state') {
            &.active {
              @include state($this, 'active-state');
            }
          }
        }
      }
    }
  }
}
@include burgr-gen($burgrs, $prefix);
